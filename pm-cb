#!/usr/bin/perl
use warnings;
use strict;
use feature qw{ say };

use Term::ANSIColor;
use Term::ReadKey;
use XML::LibXML;
use WWW::Mechanize;

my $debug = '-d' eq shift;

use constant {
    PM_URL => 'http://www.perlmonks.org/bare/?node_id=',
    FREQ   => 7,
    # Node ids:
    LOGIN => 109,
    CB    => 207304,
};


print "User? ";
chomp( my $user = <STDIN> );
print "Pass? ";
ReadMode('noecho');
chomp( my $pass = <STDIN> );
ReadMode('normal');
say STDERR '*' x length $pass;

my $mech = 'WWW::Mechanize'->new;
$mech->get(PM_URL . LOGIN);

$mech->submit_form(
                   form_number => 1,
                   fields      => { user   => $user,
                                    passwd => $pass,
                                  });

my %seen;
my $from_id;
my $previous;

while (1) {
    my $url = PM_URL . CB;
    $url .= ";fromid=$from_id" if defined $from_id;
    $mech->get($url);

    my $xml = 'XML::LibXML'->load_xml(string => $mech->content);

    $from_id = $xml->findvalue('/chatter/message[last()]/message_id')
            // $from_id;

    my $time = $xml->findvalue('/chatter/info/@gentimeGMT');
    print STDERR colored(['bright_black'], $time), "\r";

    my @messages = $xml->findnodes('/chatter/message');

    my $first = 1;
    for my $message (@messages) {
        print "\n" and undef $first if $first;

        my $id = $message->findvalue('message_id');
        if (exists $seen{$id}) {
            say STDERR colored(['cyan'], "Duplicate message $id");
            say STDERR colored(['cyan'], $previous, "---\n", $xml)
                if $debug;

        } else {
            say colored(['bold blue'],
                        '[', $message->findvalue('author'), '] '),
                $message->findvalue('text');
            undef $seen{$id};
        }
    }

    $previous = $xml;
    sleep FREQ;
}
